/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as AboutImport } from './routes/about';
import { Route as ContactImport } from './routes/contact';
import { Route as ExperienceImport } from './routes/experience';
import { Route as IndexImport } from './routes/index';
import { Route as PrivacyPolicyImport } from './routes/privacy-policy';
import { Route as ProjectsImport } from './routes/projects';
import { Route as TermsOfServiceImport } from './routes/terms-of-service';

// Create/Update Routes

const TermsOfServiceRoute = TermsOfServiceImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => rootRoute,
} as any);

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any);

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any);

const ExperienceRoute = ExperienceImport.update({
  id: '/experience',
  path: '/experience',
  getParentRoute: () => rootRoute,
} as any);

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any);

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    '/contact': {
      id: '/contact';
      path: '/contact';
      fullPath: '/contact';
      preLoaderRoute: typeof ContactImport;
      parentRoute: typeof rootRoute;
    };
    '/experience': {
      id: '/experience';
      path: '/experience';
      fullPath: '/experience';
      preLoaderRoute: typeof ExperienceImport;
      parentRoute: typeof rootRoute;
    };
    '/privacy-policy': {
      id: '/privacy-policy';
      path: '/privacy-policy';
      fullPath: '/privacy-policy';
      preLoaderRoute: typeof PrivacyPolicyImport;
      parentRoute: typeof rootRoute;
    };
    '/projects': {
      id: '/projects';
      path: '/projects';
      fullPath: '/projects';
      preLoaderRoute: typeof ProjectsImport;
      parentRoute: typeof rootRoute;
    };
    '/terms-of-service': {
      id: '/terms-of-service';
      path: '/terms-of-service';
      fullPath: '/terms-of-service';
      preLoaderRoute: typeof TermsOfServiceImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/contact': typeof ContactRoute;
  '/experience': typeof ExperienceRoute;
  '/privacy-policy': typeof PrivacyPolicyRoute;
  '/projects': typeof ProjectsRoute;
  '/terms-of-service': typeof TermsOfServiceRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/contact': typeof ContactRoute;
  '/experience': typeof ExperienceRoute;
  '/privacy-policy': typeof PrivacyPolicyRoute;
  '/projects': typeof ProjectsRoute;
  '/terms-of-service': typeof TermsOfServiceRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/contact': typeof ContactRoute;
  '/experience': typeof ExperienceRoute;
  '/privacy-policy': typeof PrivacyPolicyRoute;
  '/projects': typeof ProjectsRoute;
  '/terms-of-service': typeof TermsOfServiceRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/experience'
    | '/privacy-policy'
    | '/projects'
    | '/terms-of-service';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/experience'
    | '/privacy-policy'
    | '/projects'
    | '/terms-of-service';
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/experience'
    | '/privacy-policy'
    | '/projects'
    | '/terms-of-service';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutRoute: typeof AboutRoute;
  ContactRoute: typeof ContactRoute;
  ExperienceRoute: typeof ExperienceRoute;
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute;
  ProjectsRoute: typeof ProjectsRoute;
  TermsOfServiceRoute: typeof TermsOfServiceRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  ExperienceRoute: ExperienceRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  ProjectsRoute: ProjectsRoute,
  TermsOfServiceRoute: TermsOfServiceRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/contact",
        "/experience",
        "/privacy-policy",
        "/projects",
        "/terms-of-service"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/experience": {
      "filePath": "experience.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx"
    },
    "/terms-of-service": {
      "filePath": "terms-of-service.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
