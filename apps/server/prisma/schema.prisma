// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Provider {
  github
  google
  facebook
  linkedin
}

model User {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  provider    Provider
  role        Role          @default(user)
  avatarUrl   String?
  createdAt   DateTime      @default(now())
  comments    Comment[]
  likes       Like[]
  chatMessage ChatMessage[]
}

model Experience {
  id           String              @id @default(cuid())
  slug         String              @unique
  company      String
  url          String
  title        String
  location     String
  isRemote     Boolean
  startDate    DateTime
  endDate      DateTime?
  description  String
  duties       String[]
  technologies String[]
  imageUrl     String?
  createdAt    DateTime            @default(now())
  projects     ProjectExperience[]
}

model ProjectExperience {
  id           String     @id @default(cuid())
  title        String
  url          String
  experience   Experience @relation(fields: [experienceId], references: [id])
  experienceId String
}

model Project {
  id           String   @id @default(cuid())
  number       String
  title        String
  description  String
  slug         String   @unique
  technologies String[]
  repoUrl      String?
  demoUrl      String?
  imageUrl     String?
  isFeatured   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  projectId String?

  @@unique([userId, projectId])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  createdAt DateTime @default(now())
}
