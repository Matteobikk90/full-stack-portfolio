// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Provider {
  github
  google
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  provider  Provider
  role      Role      @default(user)
  avatarUrl String?
  createdAt DateTime  @default(now())
  Comment   Comment[]
  Like      Like[]
}

model Experience {
  id           String    @id @default(cuid())
  company      String
  title        String
  location     String?
  startDate    DateTime
  endDate      DateTime?
  description  String?
  duties       String[]
  technologies String[]
  imageUrl     String?
  createdAt    DateTime  @default(now())
  Comment      Comment[]
  Like         Like[]
}

model Project {
  id           String    @id @default(cuid())
  title        String
  description  String
  slug         String    @unique
  technologies String[]
  repoUrl      String?
  demoUrl      String?
  imageUrl     String?
  isFeatured   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Comment      Comment[]
  Like         Like[]
}

model Comment {
  id           String      @id @default(cuid())
  content      String
  createdAt    DateTime    @default(now())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  experience   Experience? @relation(fields: [experienceId], references: [id])
  experienceId String?
  project      Project?    @relation(fields: [projectId], references: [id])
  projectId    String?
}

model Like {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  experience   Experience? @relation(fields: [experienceId], references: [id])
  experienceId String?
  project      Project?    @relation(fields: [projectId], references: [id])
  projectId    String?
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
